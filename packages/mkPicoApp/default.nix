{
  pkgs,
  flake,
  system,
  ...
}: let
  rp2040packages = flake.packages.${system};
in
  {
    pname,
    src,
    extraCmakeFlags ? [],
    extraPicoLibraries ? [],
    cmakeLists ? ./CMakeLists.txt,
    ...
  } @ args: let
    toCmakeList = pkgs.lib.concatStringsSep ";";
  in
    pkgs.stdenv.mkDerivation ({
        inherit pname src;

        nativeBuildInputs = with pkgs; [
          cmake
          ninja
          python3
          pkg-config
          rp2040packages.pico-sdk
          rp2040packages.pico-extras
          gcc-arm-embedded
          picotool
          makeWrapper
        ];

        cmakeFlags =
          [
            "-G Ninja"
            "-DCMAKE_C_COMPILER=${pkgs.gcc-arm-embedded}/bin/arm-none-eabi-gcc"
            "-DCMAKE_CXX_COMPILER=${pkgs.gcc-arm-embedded}/bin/arm-none-eabi-g++"
            "-DPICO_SDK_PATH=${rp2040packages.pico-sdk}/lib/pico-sdk"
            "-DPICO_EXTRAS_PATH=${rp2040packages.pico-extras}/lib/pico-extras"
            "-DRP2040NIX_LIBRARIES=${toCmakeList extraPicoLibraries}"
            "-DRP2040NIX_NAME=${pname}"
          ]
          ++ extraCmakeFlags;

        # Install the framework default cmake lists
        patchPhase = ''
          cp ${cmakeLists} ./CMakeLists.txt
        '';

        # Compile using ninja for speed
        buildPhase = ''
          ninja
        '';

        # Output all build files generated by `pioasm`
        installPhase = ''
          mkdir -p $out/{bin,lib}

          cp *.{elf,uf2,dis,hex} $out/lib

          makeWrapper ${rp2040packages.rp2040js}/bin/rp2040js $out/bin/${pname} \
            --add-flags "--image $out/lib/${pname}.uf2"
        '';
      }
      // args)
